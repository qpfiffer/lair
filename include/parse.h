// vim: noet ts=4 sw=4
#pragma once
/** @file
 * This file is not intended to be used outside of lair, but can be useful
 * when debugging or just for digging around in. It is documented to avoid
 * confusion.
 */

struct _lair_runtime;

/**
 * @brief	Token types use when parsing.
 */
typedef enum {
	LR_ERR, /**	Unknown type. Should not happen. */
	LR_FUNCTION, /**	Function. */
	LR_FUNCTION_CALL, /**	Function call, slightly different than function.
							Usually means a function BEING called. */
	LR_OPERATOR, /**	An operator (+, -, ?, etc.). */
	LR_RETURN, /**	The return built-in function. */
	LR_FUNCTION_ARG, /**	A parameter to a function. */
	LR_VARIABLE, /**	A variable. */
	LR_INDENT, /**	An indent. */
	LR_DEDENT, /**	A dedent. Used on every newline. */
	LR_EOF, /**	EOF token. */
	LR_STRING, /**	A string constant. */
	LR_CALL, /**	A function call. */
	LR_IF, /**	The '?' operator. If, basically. */
	LR_BOOL, /**	A boolean. */
	LR_ATOM, /**	Atomic symbol. Reference to either a variable or a function. */
	LR_NUM /**	A number. */
} LAIR_TOKEN;

/**
 * @brief	Simple string type.
 */
struct _str {
	const size_t size; /**	The size of the string, in bytes. */
	const char *data; /**	The actual string content. */
};

/**
 * @brief	This is a representation of a token use for parsing into the AST later.
 */
struct _lair_token {
	char *token_str; /**	The string representation of the token. Is probably NUL-terminated. */
	LAIR_TOKEN token_type; /**	The enumerated token's type. */
	unsigned int indent_level; /**	The indent level for this piece of code. */
	struct _lair_token *next; /**	Link to the next token in the list. */
	struct _lair_token *prev; /**	Pointer to the previous token in the list. */
};

/**
 * @brief	Representation of a value. This is how we hold variable information.
 */
typedef union _lair_value {
	unsigned char bool; /**	Boolean value. */
	int num; /**	If this type is an integer, this will be the integer value. */
	char *str; /**	Like `num`, but this will hold a string instead. */
} _lair_value;

/**
 * @brief	Meta-information about a `_lair_value`.
 */
struct _lair_type {
	LAIR_TOKEN type; /**	This lets us know what kind of type the value is. Number, string, etc. */
	_lair_value value; /**	The actual value. */
};

/**
 * @brief	The main struct for representing the AST.
 * This is basically a list with lists in it. Each node can have children.
 */
struct _lair_ast {
	struct _lair_ast *prev; /**	Previous item in the list. */
	struct _lair_ast *next; /**	Next item in the list. */
	struct _lair_ast *children; /**	Child lists. */
	struct _lair_ast *sibling; /**	If this list is a child of something else, this pointer will be this item's sibling. */
	const unsigned int indent_level; /**	The indentation level of this ast node. */
	struct _lair_type atom; /**	The value of this AST object. */
};

/**
 * Helper function to convert a LAIR_TOKEN into a string representation.
 * @param[in]	val	The token to find the string representation of.
 */
char *_friendly_enum(const LAIR_TOKEN val);

/**
 * Parses a raw program (string) into tokens.
 * @param[in]	runtime	The runtime state of the program.
 * @param[in]	program	The program to be parsed.
 * @param[in]	len	The length of the program, in bytes.
 */
struct _lair_token *_lair_tokenize(struct _lair_runtime *runtime, const char *program, const size_t len);

/**
 * Helper function that dumps `_lair_token`s to STDOUT in a human
 * friendly format.
 * @param[in]	tokens	Tokens to print.
 */
void lair_print_tokens(const struct _lair_token *tokens);

/**
 * Frees the tokens generated by `_lair_tokenize`.
 * @param[in]	tokens	The tokens generated by `_lair_tokenize`.
 */
void _lair_free_tokens(struct _lair_token *tokens);

/**
 * Takes a list of tokens and turns it into an AST.
 * @param[in]	r	The current lair runtime.
 * @param[in]	tokens	The list of tokens to manipulate.
 */
struct _lair_ast *_lair_parse_from_tokens(
		struct _lair_runtime *r,
		struct _lair_token **tokens);

/**
 * Figures out what a token is based on what it looks like.
 * @param[in]	r	The current lair runtime.
 * @param[in]	new_token	The token to work on.
 * @param[in]	stripped	The raw C string representing the token.
 */
void _intuit_token_type(
		struct _lair_runtime *r,
		struct _lair_token *new_token,
		const char *stripped);

/**
 * Fills out remaining token information.
 * @param[in]	token	The token to analyze.
 */
struct _lair_type _lair_atomize_token(const struct _lair_token *token);
